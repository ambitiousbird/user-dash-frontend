(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core'], factory) :
	(factory((global.ngxSlideshow = {}),global.ng.common,global.ng.core));
}(this, (function (exports,common,core) { 'use strict';

var NgxSlideshowComponent = (function () {
    /**
     * @param {?} renderer
     */
    function NgxSlideshowComponent(renderer) {
        this.renderer = renderer;
        this.cards = 1;
        this.padding = '14px';
        this.cardSize = '100%';
        this.disableTabbing = false; // If true, you cannot tab to other slides
        this.resizeViewport = true;
        this.unit = 'px';
        // Set initial index
        this.index = 0;
        this.min = -1;
        this.findNumbers = new RegExp(/([0-9]+(?:[.][0-9]+)?)(?![\.\w])/g);
        this.findPercentages = new RegExp(/([0-9]+(?:[.][0-9]+)?%)/g);
        // To use with HammerJS
        this.SWIPE_ACTION = { LEFT: 'swipeleft', RIGHT: 'swiperight' };
    }
    /**
     * @return {?}
     */
    NgxSlideshowComponent.prototype.ngAfterViewInit = function () {
        this.onResize();
    };
    /**
     * @return {?}
     */
    NgxSlideshowComponent.prototype.ngOnChanges = function () {
        this.onResize();
    };
    /**
     * @return {?}
     */
    NgxSlideshowComponent.prototype.right = function () {
        this.rightBy(1);
    };
    /**
     * @return {?}
     */
    NgxSlideshowComponent.prototype.left = function () {
        this.leftBy(1);
    };
    /**
     * @param {?} i
     * @return {?}
     */
    NgxSlideshowComponent.prototype.goTo = function (i) {
        if (i > this.max || i < this.min) {
            throw new Error('goTo number on slideshow is out of bounds');
        }
        else {
            this.index = i;
            this.setLeft();
        }
    };
    /**
     * @param {?} i
     * @return {?}
     */
    NgxSlideshowComponent.prototype.leftBy = function (i) {
        this.index = this.calc(this.index - i);
        this.setLeft();
    };
    /**
     * @param {?} i
     * @return {?}
     */
    NgxSlideshowComponent.prototype.rightBy = function (i) {
        this.index = this.calc(this.index + i);
        this.setLeft();
    };
    /**
     * @param {?} newIndex
     * @return {?}
     */
    NgxSlideshowComponent.prototype.calc = function (newIndex) {
        if (this.max <= newIndex) {
            return this.calc(newIndex - this.max);
        }
        else if (this.min >= newIndex) {
            return this.calc(this.max + newIndex);
        }
        else {
            return newIndex;
        }
    };
    /**
     * @return {?}
     */
    NgxSlideshowComponent.prototype.setLeft = function () {
        var /** @type {?} */ newSize = "calc(0px - calc(calc(" + this.trueCardSize + " + " + this.truePaddingSize + ") * " + this.index + "))";
        this.renderer.setStyle(this.slides.nativeElement, 'left', newSize);
        if (this.disableTabbing) {
            // This will disallow tabbing to other slides
            this.toggleCardListInput();
        }
    };
    /**
     * @param {?=} action
     * @return {?}
     */
    NgxSlideshowComponent.prototype.swipe = function (action) {
        if (action === void 0) { action = this.SWIPE_ACTION.RIGHT; }
        if (action === this.SWIPE_ACTION.RIGHT) {
            this.left();
        }
        if (action === this.SWIPE_ACTION.LEFT) {
            this.right();
        }
    };
    /**
     * @param {?} card
     * @param {?} num
     * @return {?}
     */
    NgxSlideshowComponent.prototype.toggleCardInput = function (card, num) {
        for (var _i = 0, _a = card.querySelectorAll('button, input'); _i < _a.length; _i++) {
            var input = _a[_i];
            input.tabIndex = num;
        }
    };
    /**
     * @return {?}
     */
    NgxSlideshowComponent.prototype.toggleCardListInput = function () {
        var /** @type {?} */ cardObjs = this.slides.nativeElement.querySelectorAll('li');
        var /** @type {?} */ numCards = cardObjs.length;
        for (var /** @type {?} */ i = 0; i < numCards; i++) {
            if ((i < this.index) || (i >= (this.index + this.cards))) {
                this.toggleCardInput(cardObjs[i], -1); // Disable tabs
            }
            else {
                this.toggleCardInput(cardObjs[i], 0); // Enable tabs
            }
        }
    };
    /**
     * @param {?} percentage
     * @return {?}
     */
    NgxSlideshowComponent.prototype.convertPercentageToNumber = function (percentage) {
        var /** @type {?} */ num = Number(percentage.slice(0, -1)) / 100;
        return this.viewSize * num + "px";
    };
    
    /**
     * @param {?} unitless
     * @return {?}
     */
    NgxSlideshowComponent.prototype.convertNumberToUnit = function (unitless) {
        return "" + unitless + this.unit;
    };
    /**
     * @return {?}
     */
    NgxSlideshowComponent.prototype.onResize = function () {
        var /** @type {?} */ cardObjs = this.slides.nativeElement.getElementsByTagName('li'); // Get list of objects
        var /** @type {?} */ numCards = cardObjs.length; // Find out how many cards there are
        this.max = (numCards - this.cards) + 1; // Calculate max: # cards you see on screen - full # of cards
        if (!this.resizeViewport) {
            this.renderer.removeStyle(this.viewport.nativeElement, 'width');
            // This is being done because [class.full-width] was not working in tests
            this.renderer.addClass(this.viewport.nativeElement, 'full-width');
            this.viewSize = this.viewport.nativeElement.offsetWidth;
        }
        // Gets card size based on viewport (to calculate % based sizes)
        if (this.cardSize.includes('%') && this.resizeViewport) {
            this.renderer.setStyle(this.viewport.nativeElement, 'width', this.cardSize);
            this.trueCardSize = this.viewport.nativeElement.offsetWidth + "px";
        }
        else if (this.cardSize.includes('%') && !this.resizeViewport) {
            // TODO: Add tests for all unit types such as this
            this.trueCardSize = this.cardSize
                .replace(this.findPercentages, this.convertPercentageToNumber.bind(this)) // Turn into decimal to do math
                .replace(this.findNumbers, this.convertNumberToUnit.bind(this));
        }
        else {
            this.trueCardSize = this.cardSize.replace(this.findNumbers, this.convertNumberToUnit.bind(this));
        }
        // Gets card size based on viewport (to calculate % based sizes)
        if (this.padding.includes('%') && this.resizeViewport) {
            this.renderer.setStyle(this.viewport.nativeElement, 'width', this.padding);
            this.truePaddingSize = this.viewport.nativeElement.offsetWidth + "px";
        }
        else if (this.padding.includes('%') && !this.resizeViewport) {
            this.truePaddingSize = this.padding
                .replace(this.findPercentages, this.convertPercentageToNumber.bind(this)) // Turn into decimal to do math
                .replace(this.findNumbers, this.convertNumberToUnit.bind(this));
        }
        else {
            this.truePaddingSize = this.padding.replace(this.findNumbers, this.convertNumberToUnit.bind(this));
        }
        // Set size of cards + padding for calculating slides div and viewport div
        var /** @type {?} */ fullCardSize = "calc(" + this.trueCardSize + " + " + this.truePaddingSize + ")";
        // This is how wide the viewport will be
        if (this.resizeViewport) {
            this.renderer.setStyle(this.viewport.nativeElement, 'width', "calc(" + fullCardSize + " * " + this.cards + ")");
        }
        // Set size of cards. Wish this could be class based, but alas not
        for (var /** @type {?} */ i = 0; i < numCards; i++) {
            this.renderer.setStyle(cardObjs[i], 'width', "" + this.trueCardSize);
            this.renderer.setStyle(cardObjs[i], 'margin', "0 calc(" + this.truePaddingSize + " / 2)");
        }
        this.setLeft();
    };
    return NgxSlideshowComponent;
}());
NgxSlideshowComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'ngx-slideshow',
                template: "\n    <div #viewport id=\"viewport\" class=\"ngx-slideshow-component viewport\">\n      <ul #slides id=\"slides\" class=\"slides\" style=\"left: 0;\">\n        <ng-content select=\"li\"></ng-content>\n      </ul>\n    </div>\n  ",
                styles: ["\n    .ngx-slideshow-component.viewport{display:inline-block;overflow:hidden}.ngx-slideshow-component.viewport.full-width{width:100%}.ngx-slideshow-component.viewport .slides{-webkit-transition:all 1s ease;transition:all 1s ease;position:relative;white-space:nowrap;padding:0;margin:0;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;-webkit-box-sizing:border-box;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap}.ngx-slideshow-component.viewport ::ng-deep .slides>li{position:relative;float:left;list-style:none}\n  "]
            },] },
];
/**
 * @nocollapse
 */
NgxSlideshowComponent.ctorParameters = function () { return [
    { type: core.Renderer2, },
]; };
NgxSlideshowComponent.propDecorators = {
    'cards': [{ type: core.Input },],
    'padding': [{ type: core.Input },],
    'cardSize': [{ type: core.Input },],
    'disableTabbing': [{ type: core.Input },],
    'resizeViewport': [{ type: core.Input },],
    'unit': [{ type: core.Input },],
    'viewport': [{ type: core.ViewChild, args: ['viewport',] },],
    'slides': [{ type: core.ViewChild, args: ['slides',] },],
    'onResize': [{ type: core.HostListener, args: ['window:resize', [],] },],
};

var NgxSlideshowModule = (function () {
    function NgxSlideshowModule() {
    }
    /**
     * @return {?}
     */
    NgxSlideshowModule.forRoot = function () {
        return {
            ngModule: NgxSlideshowModule,
            providers: []
        };
    };
    return NgxSlideshowModule;
}());
NgxSlideshowModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [
                    common.CommonModule
                ],
                exports: [NgxSlideshowComponent],
                declarations: [NgxSlideshowComponent]
            },] },
];
/**
 * @nocollapse
 */
NgxSlideshowModule.ctorParameters = function () { return []; };

/**
 * Generated bundle index. Do not edit.
 */

exports.NgxSlideshowComponent = NgxSlideshowComponent;
exports.NgxSlideshowModule = NgxSlideshowModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-slideshow.umd.js.map
