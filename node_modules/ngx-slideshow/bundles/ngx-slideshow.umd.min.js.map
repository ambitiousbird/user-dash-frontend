{"version":3,"file":"ngx-slideshow.umd.min.js","sources":["../../tmp/module/component/ngx-slideshow.component.ts","../../tmp/module/ngx-slideshow.module.ts"],"sourcesContent":["import {Component, ElementRef, ViewChild, Renderer2, Input, AfterViewInit, OnChanges, HostListener} from '@angular/core';\nexport class NgxSlideshowComponent implements AfterViewInit, OnChanges {\n   cards = 1;\n   padding = '14px';\n   cardSize = '100%';\n   disableTabbing = false; // If true, you cannot tab to other slides\n   resizeViewport = true;\n   unit = 'px';\n\n  // Set initial index\n  index = 0;\n  min: number = -1;\n\n  // These will be generated with ngAfterViewInit, as they rely on the number of cards loaded into the carousel\n  max: number;\nprivate viewSize: number;\nprivate trueCardSize: string;\nprivate truePaddingSize: string;\nprivate findNumbers = new RegExp(/([0-9]+(?:[.][0-9]+)?)(?![\\.\\w])/g);\nprivate findPercentages = new RegExp(/([0-9]+(?:[.][0-9]+)?%)/g);\nprivate viewport: ElementRef;\n    slides: ElementRef;\n\n  // To use with HammerJS\n  SWIPE_ACTION = {LEFT: 'swipeleft', RIGHT: 'swiperight'};\n/**\n * @param {?} renderer\n */\nconstructor(public renderer: Renderer2) {\n  }\n/**\n * @return {?}\n */\nngAfterViewInit(): void {\n    this.onResize();\n  }\n/**\n * @return {?}\n */\nngOnChanges(): void {\n    this.onResize();\n  }\n/**\n * @return {?}\n */\nright(): void {\n    this.rightBy(1);\n  }\n/**\n * @return {?}\n */\nleft(): void {\n    this.leftBy(1);\n  }\n/**\n * @param {?} i\n * @return {?}\n */\ngoTo(i: number): void {\n    if (i > this.max || i < this.min) {\n      throw new Error('goTo number on slideshow is out of bounds');\n    } else {\n      this.index = i;\n      this.setLeft();\n    }\n  }\n/**\n * @param {?} i\n * @return {?}\n */\nleftBy(i: number): void {\n    this.index = this.calc(this.index - i);\n    this.setLeft();\n  }\n/**\n * @param {?} i\n * @return {?}\n */\nrightBy(i: number): void {\n    this.index = this.calc(this.index + i);\n    this.setLeft();\n  }\n/**\n * @param {?} newIndex\n * @return {?}\n */\nprivate calc(newIndex: number): number {\n    if (this.max <= newIndex) {\n      return this.calc(newIndex - this.max);\n    } else if (this.min >= newIndex) {\n      return this.calc(this.max + newIndex);\n    } else {\n      return newIndex\n    }\n  }\n/**\n * @return {?}\n */\nprivate setLeft(): void {\n    const /** @type {?} */ newSize = `calc(0px - calc(calc(${this.trueCardSize} + ${this.truePaddingSize}) * ${this.index}))`;\n    this.renderer.setStyle(this.slides.nativeElement, 'left', newSize);\n    if (this.disableTabbing) {\n      // This will disallow tabbing to other slides\n      this.toggleCardListInput();\n    }\n  }\n/**\n * @param {?=} action\n * @return {?}\n */\nswipe(action = this.SWIPE_ACTION.RIGHT): void {\n    if (action === this.SWIPE_ACTION.RIGHT) {\n      this.left();\n    }\n    if (action === this.SWIPE_ACTION.LEFT) {\n      this.right();\n    }\n  }\n/**\n * @param {?} card\n * @param {?} num\n * @return {?}\n */\nprivate toggleCardInput(card: any, num: number) {\n    for (const /** @type {?} */ input of card.querySelectorAll('button, input')) {\n      input.tabIndex = num;\n    }\n  }\n/**\n * @return {?}\n */\nprivate toggleCardListInput() {\n    const /** @type {?} */ cardObjs = this.slides.nativeElement.querySelectorAll('li');\n    const /** @type {?} */ numCards = cardObjs.length;\n    for (let /** @type {?} */ i = 0; i < numCards; i++) {\n      if ((i < this.index) || (i >= (this.index + this.cards))) { // If not visible\n        this.toggleCardInput(cardObjs[i], -1); // Disable tabs\n      } else { // Otherwise\n        this.toggleCardInput(cardObjs[i], 0); // Enable tabs\n      }\n    }\n  }\n/**\n * @param {?} percentage\n * @return {?}\n */\nprivate convertPercentageToNumber(percentage: string) {\n    const /** @type {?} */ num = Number(percentage.slice(0, -1)) / 100;\n    return `${this.viewSize * num}px`;\n  };\n/**\n * @param {?} unitless\n * @return {?}\n */\nprivate convertNumberToUnit(unitless: string) {\n    return `${unitless}${this.unit}`\n  }\n/**\n * @return {?}\n */\nprivate onResize(): void {\n    const /** @type {?} */ cardObjs = this.slides.nativeElement.getElementsByTagName('li'); // Get list of objects\n    const /** @type {?} */ numCards = cardObjs.length; // Find out how many cards there are\n    this.max = (numCards - this.cards) + 1; // Calculate max: # cards you see on screen - full # of cards\n\n    if (!this.resizeViewport) {\n      this.renderer.removeStyle(this.viewport.nativeElement, 'width');\n      // This is being done because [class.full-width] was not working in tests\n      this.renderer.addClass(this.viewport.nativeElement, 'full-width')\n      this.viewSize = this.viewport.nativeElement.offsetWidth;\n    }\n\n    // Gets card size based on viewport (to calculate % based sizes)\n    if (this.cardSize.includes('%') && this.resizeViewport) {\n      this.renderer.setStyle(this.viewport.nativeElement, 'width', this.cardSize);\n      this.trueCardSize = `${this.viewport.nativeElement.offsetWidth}px`;\n    } else if (this.cardSize.includes('%') && !this.resizeViewport) {\n      // TODO: Add tests for all unit types such as this\n      this.trueCardSize = this.cardSize\n                            .replace(this.findPercentages, this.convertPercentageToNumber.bind(this)) // Turn into decimal to do math\n                            .replace(this.findNumbers, this.convertNumberToUnit.bind(this));\n    } else {\n      this.trueCardSize = this.cardSize.replace(this.findNumbers, this.convertNumberToUnit.bind(this));\n    }\n\n    // Gets card size based on viewport (to calculate % based sizes)\n    if (this.padding.includes('%') && this.resizeViewport) {\n      this.renderer.setStyle(this.viewport.nativeElement, 'width', this.padding);\n      this.truePaddingSize = `${this.viewport.nativeElement.offsetWidth}px`;\n    } else if (this.padding.includes('%') && !this.resizeViewport) {\n      this.truePaddingSize = this.padding\n                               .replace(this.findPercentages, this.convertPercentageToNumber.bind(this)) // Turn into decimal to do math\n                               .replace(this.findNumbers, this.convertNumberToUnit.bind(this));\n    } else {\n      this.truePaddingSize = this.padding.replace(this.findNumbers, this.convertNumberToUnit.bind(this));\n    }\n\n    // Set size of cards + padding for calculating slides div and viewport div\n    const /** @type {?} */ fullCardSize = `calc(${this.trueCardSize} + ${this.truePaddingSize})`;\n\n    // This is how wide the viewport will be\n    if (this.resizeViewport) {\n      this.renderer.setStyle(this.viewport.nativeElement, 'width', `calc(${fullCardSize} * ${this.cards})`);\n    }\n\n    // Set size of cards. Wish this could be class based, but alas not\n    for (let /** @type {?} */ i = 0; i < numCards; i++) {\n      this.renderer.setStyle(cardObjs[i], 'width', `${this.trueCardSize}`);\n      this.renderer.setStyle(cardObjs[i], 'margin', `0 calc(${this.truePaddingSize} / 2)`);\n    }\n\n    this.setLeft();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngx-slideshow',\n  template: `\n    <div #viewport id=\"viewport\" class=\"ngx-slideshow-component viewport\">\n      <ul #slides id=\"slides\" class=\"slides\" style=\"left: 0;\">\n        <ng-content select=\"li\"></ng-content>\n      </ul>\n    </div>\n  `,\n  styles: [`\n    .ngx-slideshow-component.viewport{display:inline-block;overflow:hidden}.ngx-slideshow-component.viewport.full-width{width:100%}.ngx-slideshow-component.viewport .slides{-webkit-transition:all 1s ease;transition:all 1s ease;position:relative;white-space:nowrap;padding:0;margin:0;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;-webkit-box-sizing:border-box;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap}.ngx-slideshow-component.viewport ::ng-deep .slides>li{position:relative;float:left;list-style:none}\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'cards': [{ type: Input },],\n'padding': [{ type: Input },],\n'cardSize': [{ type: Input },],\n'disableTabbing': [{ type: Input },],\n'resizeViewport': [{ type: Input },],\n'unit': [{ type: Input },],\n'viewport': [{ type: ViewChild, args: ['viewport', ] },],\n'slides': [{ type: ViewChild, args: ['slides', ] },],\n'onResize': [{ type: HostListener, args: ['window:resize', [], ] },],\n};\n}\n\nfunction NgxSlideshowComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxSlideshowComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxSlideshowComponent.ctorParameters;\n/** @type {?} */\nNgxSlideshowComponent.propDecorators;\n/** @type {?} */\nNgxSlideshowComponent.prototype.cards;\n/** @type {?} */\nNgxSlideshowComponent.prototype.padding;\n/** @type {?} */\nNgxSlideshowComponent.prototype.cardSize;\n/** @type {?} */\nNgxSlideshowComponent.prototype.disableTabbing;\n/** @type {?} */\nNgxSlideshowComponent.prototype.resizeViewport;\n/** @type {?} */\nNgxSlideshowComponent.prototype.unit;\n/** @type {?} */\nNgxSlideshowComponent.prototype.index;\n/** @type {?} */\nNgxSlideshowComponent.prototype.min;\n/** @type {?} */\nNgxSlideshowComponent.prototype.max;\n/** @type {?} */\nNgxSlideshowComponent.prototype.viewSize;\n/** @type {?} */\nNgxSlideshowComponent.prototype.trueCardSize;\n/** @type {?} */\nNgxSlideshowComponent.prototype.truePaddingSize;\n/** @type {?} */\nNgxSlideshowComponent.prototype.findNumbers;\n/** @type {?} */\nNgxSlideshowComponent.prototype.findPercentages;\n/** @type {?} */\nNgxSlideshowComponent.prototype.viewport;\n/** @type {?} */\nNgxSlideshowComponent.prototype.slides;\n/** @type {?} */\nNgxSlideshowComponent.prototype.SWIPE_ACTION;\n/** @type {?} */\nNgxSlideshowComponent.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule, ModuleWithProviders} from '@angular/core';\n\nimport {NgxSlideshowComponent} from './component/ngx-slideshow.component';\n\n// Export module's public API\nexport {NgxSlideshowComponent} from './component/ngx-slideshow.component';\nexport class NgxSlideshowModule {\n/**\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgxSlideshowModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  exports: [NgxSlideshowComponent],\n  declarations: [NgxSlideshowComponent]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgxSlideshowModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxSlideshowModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxSlideshowModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["renderer","this","RegExp","LEFT","RIGHT","NgxSlideshowComponent","onResize","rightBy","leftBy","i","max","min","Error","index","setLeft","calc","newIndex","newSize","trueCardSize","truePaddingSize","setStyle","slides","nativeElement","disableTabbing","toggleCardListInput","action","SWIPE_ACTION","left","right","card","num","_a","querySelectorAll","_i","tabIndex","cardObjs","numCards","length","cards","toggleCardInput","percentage","Number","slice","viewSize","unitless","unit","getElementsByTagName","resizeViewport","removeStyle","viewport","addClass","offsetWidth","cardSize","includes","replace","findPercentages","convertPercentageToNumber","bind","findNumbers","convertNumberToUnit","padding","fullCardSize","type","Component","args","selector","template","styles","Renderer2","Input","ViewChild","HostListener","NgxSlideshowModule","ngModule","providers","NgModule","imports","CommonModule","exports","declarations"],"mappings":"+SACA,iBA2BA,WAIqBA,GAAAC,cAAAD,EA9BlBC,WAEQ,EADRA,aAEU,OADVA,cAEW,OADXA,qBAEiB,EADjBA,qBAEiB,EADjBA,UAEO,KACRA,WAEQ,EADRA,UAEc,EASNA,iBAAc,IAAIC,OAAO,qCACzBD,qBAAkB,IAAIC,OAAO,4BACrCD,mBAMeE,KAAO,YAAaC,MAAO,cAuN5C,OApNAC,4BAAA,WACIJ,KAEKK,YAGTD,wBAAA,WACIJ,KAAKK,YAKTD,kBAAA,WACIJ,KAFKM,QAAQ,IAOjBF,iBAAA,WACIJ,KAJKO,OAAO,IAUhBH,iBAAA,SAPGI,GAQC,GAAIA,EAPIR,KAAKS,KAAOD,EAAIR,KAAKU,IAQ3B,MAPM,IAAIC,MAAM,6CAShBX,KAPKY,MAAQJ,EAQbR,KAPKa,WAcXT,mBAAA,SAVGI,GAWCR,KAVKY,MAAQZ,KAAKc,KAAKd,KAAKY,MAAQJ,GAWpCR,KAVKa,WAgBTT,oBAAA,SAbGI,GAcCR,KAbKY,MAAQZ,KAAKc,KAAKd,KAAKY,MAAQJ,GAcpCR,KAbKa,WAGNT,iBAgBH,SAhBGW,GAiBC,OAAIf,KAhBKS,KAAOM,EACPf,KAAKc,KAAKC,EAAWf,KAAKS,KAC5BT,KAASU,KAAOK,EACdf,KAAKc,KAAKd,KAAKS,IAAMM,GAErBA,GAIVX,oBAkBH,WACI,IAlBMY,EAAU,wBAAAhB,KAA6BiB,mBAAajB,KAAUkB,uBAAgBlB,KAAWY,WAmB/FZ,KAlBKD,SAASoB,SAASnB,KAAKoB,OAAOC,cAAe,OAAQL,GAmBtDhB,KAlBKsB,gBAoBPtB,KAlBKuB,uBAyBXnB,kBAAA,SApBGoB,gBAAAA,EAAAxB,KAAAyB,aAAAtB,OAqBKqB,IApBWxB,KAAKyB,aAAatB,OAqB/BH,KApBK0B,OAsBHF,IApBWxB,KAAKyB,aAAavB,MAqB/BF,KApBK2B,SAIRvB,4BAwBH,SAxBGwB,EAAAC,GAyBC,IAxBoB,QAAAC,EAAAF,EAAKG,iBAAiB,iBAAtBC,WAAAA,UACZC,SAAWJ,IAIpBzB,gCA0BH,WAGI,IAAK,IA5BC8B,EAAWlC,KAAKoB,OAAOC,cAAcU,iBAAiB,MACtDI,EAAWD,EAASE,OACjB5B,EAAI,EAAGA,EAAI2B,EAAU3B,IACvBA,EAAIR,KAAKY,OAAUJ,GAAMR,KAAMY,MAAQZ,KAAKqC,MA2B/CrC,KA1BKsC,gBAAgBJ,EAAS1B,IAAI,GA4BlCR,KA1BKsC,gBAAgBJ,EAAS1B,GAAI,IAKvCJ,sCA6BH,SA7BGmC,GA8BC,IA7BMV,EAAMW,OAAOD,EAAWE,MAAM,GAAG,IAAO,IA8B9C,OA7BOzC,KAAQ0C,SAAWb,QAG3BzB,gCAgCH,SAhCGuC,GAiCC,MAhCO,GAAAA,EAAY3C,KAAO4C,MAK3BxC,qBAgCH,WACI,IAhCM8B,EAAWlC,KAAKoB,OAAOC,cAAcwB,qBAAqB,MAC1DV,EAAWD,EAASE,OAiC1BpC,KAhCKS,IAAM0B,EAAYnC,KAAKqC,MAAS,EAEhCrC,KAAK8C,iBAiCR9C,KAhCKD,SAASgD,YAAY/C,KAAKgD,SAAS3B,cAAe,SAkCvDrB,KAhCKD,SAASkD,SAASjD,KAAKgD,SAAS3B,cAAe,cAiCpDrB,KAhCK0C,SAAW1C,KAAKgD,SAAS3B,cAAc6B,aAoC1ClD,KAhCKmD,SAASC,SAAS,MAAQpD,KAAK8C,gBAiCtC9C,KAhCKD,SAASoB,SAASnB,KAAKgD,SAAS3B,cAAe,QAASrB,KAAKmD,UAiClEnD,KAhCKiB,aAAejB,KAAQgD,SAAS3B,cAAc6B,kBAC9ClD,KAASmD,SAASC,SAAS,OAAQpD,KAAM8C,eAkC9C9C,KAhCKiB,aAAejB,KAAKmD,SAiCFE,QAhCQrD,KAAKsD,gBAAiBtD,KAAKuD,0BAA0BC,KAAKxD,OAiClEqD,QAhCQrD,KAAKyD,YAAazD,KAAK0D,oBAAoBF,KAAKxD,OAkC/EA,KAhCKiB,aAAejB,KAAKmD,SAASE,QAAQrD,KAAKyD,YAAazD,KAAK0D,oBAAoBF,KAAKxD,OAoCxFA,KAhCK2D,QAAQP,SAAS,MAAQpD,KAAK8C,gBAiCrC9C,KAhCKD,SAASoB,SAASnB,KAAKgD,SAAS3B,cAAe,QAASrB,KAAK2D,SAiClE3D,KAhCKkB,gBAAkBlB,KAAQgD,SAAS3B,cAAc6B,kBACjDlD,KAAS2D,QAAQP,SAAS,OAAQpD,KAAM8C,eAiC7C9C,KAhCKkB,gBAAkBlB,KAAK2D,QAiCFN,QAhCQrD,KAAKsD,gBAAiBtD,KAAKuD,0BAA0BC,KAAKxD,OAiClEqD,QAhCQrD,KAAKyD,YAAazD,KAAK0D,oBAAoBF,KAAKxD,OAkClFA,KAhCKkB,gBAAkBlB,KAAK2D,QAAQN,QAAQrD,KAAKyD,YAAazD,KAAK0D,oBAAoBF,KAAKxD,OAoC9F,IAhCM4D,EAAe,QAAA5D,KAAaiB,mBAAajB,KAAUkB,oBAmCrDlB,KAhCK8C,gBAiCP9C,KAhCKD,SAASoB,SAASnB,KAAKgD,SAAS3B,cAAe,QAAS,QAAAuC,QAAqB5D,KAAUqC,WAoC9F,IAAK,IAhCI7B,EAAI,EAAGA,EAAI2B,EAAU3B,IAiC5BR,KAhCKD,SAASoB,SAASe,EAAS1B,GAAI,QAAS,GAAAR,KAAQiB,cAiCrDjB,KAhCKD,SAASoB,SAASe,EAAS1B,GAAI,SAAU,UAAAR,KAAekB,yBAiBjElB,KAdOa,+BAGPgD,KAAMC,YAAWC,OAiCjBC,SAhCU,gBAiCVC,SAhCU,2NAuCVC,QAhCQ,uvBAMT9D,iBAAA,WAAA,QAmCAyD,KAAMM,eAhCA/D,kBAmCPiC,QAlCYwB,KAAMO,UAmClBT,UAlCcE,KAAMO,UAmCpBjB,WAlCeU,KAAMO,UAmCrB9C,iBAlCqBuC,KAAMO,UAmC3BtB,iBAlCqBe,KAAMO,UAmC3BxB,OAlCWiB,KAAMO,UAmCjBpB,WAlCea,KAAMQ,YAAWN,MAAM,cAmCtC3C,SAlCayC,KAAMQ,YAAWN,MAAM,YAmCpC1D,WAlCewD,KAAMS,eAAcP,MAAM,uBC1MzC,iBAAA,cAwBA,OArBGQ,UACH,WACI,OACEC,SADUD,EAEVE,mCAGJZ,KAAMa,WAAUX,OAEhBY,SACEC,gBAEFC,SADSzE,GAET0E,cADc1E,OAIfmE,iBAAA,WAAA"}