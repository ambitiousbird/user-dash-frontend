{"version":3,"file":"ngx-slideshow.es5.js","sources":["../tmp/module/component/ngx-slideshow.component.ts","../tmp/module/ngx-slideshow.module.ts","../tmp/ngx-slideshow.ts"],"sourcesContent":["import {Component, ElementRef, ViewChild, Renderer2, Input, AfterViewInit, OnChanges, HostListener} from '@angular/core';\nexport class NgxSlideshowComponent implements AfterViewInit, OnChanges {\n   cards = 1;\n   padding = '14px';\n   cardSize = '100%';\n   disableTabbing = false; // If true, you cannot tab to other slides\n   resizeViewport = true;\n   unit = 'px';\n\n  // Set initial index\n  index = 0;\n  min: number = -1;\n\n  // These will be generated with ngAfterViewInit, as they rely on the number of cards loaded into the carousel\n  max: number;\nprivate viewSize: number;\nprivate trueCardSize: string;\nprivate truePaddingSize: string;\nprivate findNumbers = new RegExp(/([0-9]+(?:[.][0-9]+)?)(?![\\.\\w])/g);\nprivate findPercentages = new RegExp(/([0-9]+(?:[.][0-9]+)?%)/g);\nprivate viewport: ElementRef;\n    slides: ElementRef;\n\n  // To use with HammerJS\n  SWIPE_ACTION = {LEFT: 'swipeleft', RIGHT: 'swiperight'};\n/**\n * @param {?} renderer\n */\nconstructor(public renderer: Renderer2) {\n  }\n/**\n * @return {?}\n */\nngAfterViewInit(): void {\n    this.onResize();\n  }\n/**\n * @return {?}\n */\nngOnChanges(): void {\n    this.onResize();\n  }\n/**\n * @return {?}\n */\nright(): void {\n    this.rightBy(1);\n  }\n/**\n * @return {?}\n */\nleft(): void {\n    this.leftBy(1);\n  }\n/**\n * @param {?} i\n * @return {?}\n */\ngoTo(i: number): void {\n    if (i > this.max || i < this.min) {\n      throw new Error('goTo number on slideshow is out of bounds');\n    } else {\n      this.index = i;\n      this.setLeft();\n    }\n  }\n/**\n * @param {?} i\n * @return {?}\n */\nleftBy(i: number): void {\n    this.index = this.calc(this.index - i);\n    this.setLeft();\n  }\n/**\n * @param {?} i\n * @return {?}\n */\nrightBy(i: number): void {\n    this.index = this.calc(this.index + i);\n    this.setLeft();\n  }\n/**\n * @param {?} newIndex\n * @return {?}\n */\nprivate calc(newIndex: number): number {\n    if (this.max <= newIndex) {\n      return this.calc(newIndex - this.max);\n    } else if (this.min >= newIndex) {\n      return this.calc(this.max + newIndex);\n    } else {\n      return newIndex\n    }\n  }\n/**\n * @return {?}\n */\nprivate setLeft(): void {\n    const /** @type {?} */ newSize = `calc(0px - calc(calc(${this.trueCardSize} + ${this.truePaddingSize}) * ${this.index}))`;\n    this.renderer.setStyle(this.slides.nativeElement, 'left', newSize);\n    if (this.disableTabbing) {\n      // This will disallow tabbing to other slides\n      this.toggleCardListInput();\n    }\n  }\n/**\n * @param {?=} action\n * @return {?}\n */\nswipe(action = this.SWIPE_ACTION.RIGHT): void {\n    if (action === this.SWIPE_ACTION.RIGHT) {\n      this.left();\n    }\n    if (action === this.SWIPE_ACTION.LEFT) {\n      this.right();\n    }\n  }\n/**\n * @param {?} card\n * @param {?} num\n * @return {?}\n */\nprivate toggleCardInput(card: any, num: number) {\n    for (const /** @type {?} */ input of card.querySelectorAll('button, input')) {\n      input.tabIndex = num;\n    }\n  }\n/**\n * @return {?}\n */\nprivate toggleCardListInput() {\n    const /** @type {?} */ cardObjs = this.slides.nativeElement.querySelectorAll('li');\n    const /** @type {?} */ numCards = cardObjs.length;\n    for (let /** @type {?} */ i = 0; i < numCards; i++) {\n      if ((i < this.index) || (i >= (this.index + this.cards))) { // If not visible\n        this.toggleCardInput(cardObjs[i], -1); // Disable tabs\n      } else { // Otherwise\n        this.toggleCardInput(cardObjs[i], 0); // Enable tabs\n      }\n    }\n  }\n/**\n * @param {?} percentage\n * @return {?}\n */\nprivate convertPercentageToNumber(percentage: string) {\n    const /** @type {?} */ num = Number(percentage.slice(0, -1)) / 100;\n    return `${this.viewSize * num}px`;\n  };\n/**\n * @param {?} unitless\n * @return {?}\n */\nprivate convertNumberToUnit(unitless: string) {\n    return `${unitless}${this.unit}`\n  }\n/**\n * @return {?}\n */\nprivate onResize(): void {\n    const /** @type {?} */ cardObjs = this.slides.nativeElement.getElementsByTagName('li'); // Get list of objects\n    const /** @type {?} */ numCards = cardObjs.length; // Find out how many cards there are\n    this.max = (numCards - this.cards) + 1; // Calculate max: # cards you see on screen - full # of cards\n\n    if (!this.resizeViewport) {\n      this.renderer.removeStyle(this.viewport.nativeElement, 'width');\n      // This is being done because [class.full-width] was not working in tests\n      this.renderer.addClass(this.viewport.nativeElement, 'full-width')\n      this.viewSize = this.viewport.nativeElement.offsetWidth;\n    }\n\n    // Gets card size based on viewport (to calculate % based sizes)\n    if (this.cardSize.includes('%') && this.resizeViewport) {\n      this.renderer.setStyle(this.viewport.nativeElement, 'width', this.cardSize);\n      this.trueCardSize = `${this.viewport.nativeElement.offsetWidth}px`;\n    } else if (this.cardSize.includes('%') && !this.resizeViewport) {\n      // TODO: Add tests for all unit types such as this\n      this.trueCardSize = this.cardSize\n                            .replace(this.findPercentages, this.convertPercentageToNumber.bind(this)) // Turn into decimal to do math\n                            .replace(this.findNumbers, this.convertNumberToUnit.bind(this));\n    } else {\n      this.trueCardSize = this.cardSize.replace(this.findNumbers, this.convertNumberToUnit.bind(this));\n    }\n\n    // Gets card size based on viewport (to calculate % based sizes)\n    if (this.padding.includes('%') && this.resizeViewport) {\n      this.renderer.setStyle(this.viewport.nativeElement, 'width', this.padding);\n      this.truePaddingSize = `${this.viewport.nativeElement.offsetWidth}px`;\n    } else if (this.padding.includes('%') && !this.resizeViewport) {\n      this.truePaddingSize = this.padding\n                               .replace(this.findPercentages, this.convertPercentageToNumber.bind(this)) // Turn into decimal to do math\n                               .replace(this.findNumbers, this.convertNumberToUnit.bind(this));\n    } else {\n      this.truePaddingSize = this.padding.replace(this.findNumbers, this.convertNumberToUnit.bind(this));\n    }\n\n    // Set size of cards + padding for calculating slides div and viewport div\n    const /** @type {?} */ fullCardSize = `calc(${this.trueCardSize} + ${this.truePaddingSize})`;\n\n    // This is how wide the viewport will be\n    if (this.resizeViewport) {\n      this.renderer.setStyle(this.viewport.nativeElement, 'width', `calc(${fullCardSize} * ${this.cards})`);\n    }\n\n    // Set size of cards. Wish this could be class based, but alas not\n    for (let /** @type {?} */ i = 0; i < numCards; i++) {\n      this.renderer.setStyle(cardObjs[i], 'width', `${this.trueCardSize}`);\n      this.renderer.setStyle(cardObjs[i], 'margin', `0 calc(${this.truePaddingSize} / 2)`);\n    }\n\n    this.setLeft();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngx-slideshow',\n  template: `\n    <div #viewport id=\"viewport\" class=\"ngx-slideshow-component viewport\">\n      <ul #slides id=\"slides\" class=\"slides\" style=\"left: 0;\">\n        <ng-content select=\"li\"></ng-content>\n      </ul>\n    </div>\n  `,\n  styles: [`\n    .ngx-slideshow-component.viewport{display:inline-block;overflow:hidden}.ngx-slideshow-component.viewport.full-width{width:100%}.ngx-slideshow-component.viewport .slides{-webkit-transition:all 1s ease;transition:all 1s ease;position:relative;white-space:nowrap;padding:0;margin:0;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;-webkit-box-sizing:border-box;box-sizing:border-box;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap}.ngx-slideshow-component.viewport ::ng-deep .slides>li{position:relative;float:left;list-style:none}\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'cards': [{ type: Input },],\n'padding': [{ type: Input },],\n'cardSize': [{ type: Input },],\n'disableTabbing': [{ type: Input },],\n'resizeViewport': [{ type: Input },],\n'unit': [{ type: Input },],\n'viewport': [{ type: ViewChild, args: ['viewport', ] },],\n'slides': [{ type: ViewChild, args: ['slides', ] },],\n'onResize': [{ type: HostListener, args: ['window:resize', [], ] },],\n};\n}\n\nfunction NgxSlideshowComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxSlideshowComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxSlideshowComponent.ctorParameters;\n/** @type {?} */\nNgxSlideshowComponent.propDecorators;\n/** @type {?} */\nNgxSlideshowComponent.prototype.cards;\n/** @type {?} */\nNgxSlideshowComponent.prototype.padding;\n/** @type {?} */\nNgxSlideshowComponent.prototype.cardSize;\n/** @type {?} */\nNgxSlideshowComponent.prototype.disableTabbing;\n/** @type {?} */\nNgxSlideshowComponent.prototype.resizeViewport;\n/** @type {?} */\nNgxSlideshowComponent.prototype.unit;\n/** @type {?} */\nNgxSlideshowComponent.prototype.index;\n/** @type {?} */\nNgxSlideshowComponent.prototype.min;\n/** @type {?} */\nNgxSlideshowComponent.prototype.max;\n/** @type {?} */\nNgxSlideshowComponent.prototype.viewSize;\n/** @type {?} */\nNgxSlideshowComponent.prototype.trueCardSize;\n/** @type {?} */\nNgxSlideshowComponent.prototype.truePaddingSize;\n/** @type {?} */\nNgxSlideshowComponent.prototype.findNumbers;\n/** @type {?} */\nNgxSlideshowComponent.prototype.findPercentages;\n/** @type {?} */\nNgxSlideshowComponent.prototype.viewport;\n/** @type {?} */\nNgxSlideshowComponent.prototype.slides;\n/** @type {?} */\nNgxSlideshowComponent.prototype.SWIPE_ACTION;\n/** @type {?} */\nNgxSlideshowComponent.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule, ModuleWithProviders} from '@angular/core';\n\nimport {NgxSlideshowComponent} from './component/ngx-slideshow.component';\n\n// Export module's public API\nexport {NgxSlideshowComponent} from './component/ngx-slideshow.component';\nexport class NgxSlideshowModule {\n/**\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgxSlideshowModule,\n      providers: []\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  exports: [NgxSlideshowComponent],\n  declarations: [NgxSlideshowComponent]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgxSlideshowModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxSlideshowModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxSlideshowModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {NgxSlideshowComponent,NgxSlideshowModule} from './index';\n"],"names":[],"mappings":";;;AACA;;;;IA2BA,+BAIqB,QAAU;QAAV,aAAA,GAAA,QAAA,CAAU;QA9B5B,UAAK,GAEG,CAAA,CAAE;QADV,YAAO,GAEG,MAAA,CAAO;QADjB,aAAQ,GAEG,MAAA,CAAO;QADlB,mBAAc,GAEG,KAAA,CAAM;QADvB,mBAAc,GAEG,IAAA,CAAK;QADtB,SAAI,GAEG,IAAA,CAAK;;QACb,UAAK,GAEG,CAAA,CAAE;QADV,QAAG,GAEW,CAAA,CAAE,CAAC;QAST,gBAAA,GAAc,IAAI,MAAA,CAAO,mCAAC,CAAmC,CAAC;QAC9D,oBAAA,GAAkB,IAAI,MAAA,CAAO,0BAAC,CAA0B,CAAC;;QACjE,iBAAY,GAMG,EAAA,IAAE,EAAK,WAAA,EAAa,KAAA,EAAO,YAAA,EAAa,CAAC;KADvD;;;;IAIH,+CAEG,GAFH;QACI,IAAI,CAEC,QAAC,EAAQ,CAAE;KADjB;;;;IAIH,2CAAG,GAAH;QACI,IAAI,CAAC,QAAC,EAAQ,CAAE;KACjB;;;;IAIH,qCAFG,GAEH;QACI,IAAI,CAFC,OAAC,CAAO,CAAC,CAAC,CAAC;KAGjB;;;;IAIH,oCAJG,GAIH;QACI,IAAI,CAJC,MAAC,CAAM,CAAC,CAAC,CAAC;KAKhB;;;;;IAKH,oCAPG,GAOH,UAPG,CAAA;QAQC,IAAI,CAPC,GAAG,IAAA,CAAK,GAAC,IAAM,CAAA,GAAI,IAAA,CAAK,GAAC,EAAI;YAQhC,MAPM,IAAI,KAAA,CAAM,2CAAC,CAA2C,CAAC;SAQ9D;aAPM;YAQL,IAAI,CAPC,KAAC,GAAO,CAAA,CAAE;YAQf,IAAI,CAPC,OAAC,EAAO,CAAE;SAQhB;KACF;;;;;IAKH,sCAVG,GAUH,UAVG,CAAA;QAWC,IAAI,CAVC,KAAC,GAAO,IAAA,CAAK,IAAC,CAAI,IAAC,CAAI,KAAC,GAAO,CAAA,CAAE,CAAC;QAWvC,IAAI,CAVC,OAAC,EAAO,CAAE;KAWhB;;;;;IAKH,uCAbG,GAaH,UAbG,CAAA;QAcC,IAAI,CAbC,KAAC,GAAO,IAAA,CAAK,IAAC,CAAI,IAAC,CAAI,KAAC,GAAO,CAAA,CAAE,CAAC;QAcvC,IAAI,CAbC,OAAC,EAAO,CAAE;KAchB;;;;;IAXA,oCAAA,GAgBH,UAhBG,QAAA;QAiBC,IAAI,IAhBC,CAAI,GAAC,IAAM,QAAA,EAAU;YAiBxB,OAhBO,IAAA,CAAK,IAAC,CAAI,QAAC,GAAU,IAAA,CAAK,GAAC,CAAG,CAAC;SAiBvC;aAhBM,IAAA,IAAK,CAAI,GAAC,IAAM,QAAA,EAAU;YAiB/B,OAhBO,IAAA,CAAK,IAAC,CAAI,IAAC,CAAI,GAAC,GAAK,QAAA,CAAS,CAAC;SAiBvC;aAhBM;YAiBL,OAhBO,QAAA,CAAA;SAiBR;KACF;;;;IAdA,uCAAA,GAkBH;QACI,qBAlBM,OAAA,GAAU,0BAAA,IAAyB,CAAI,YAAC,WAAY,IAAM,CAAI,eAAC,YAAe,IAAO,CAAI,KAAC,OAAK,CAAI;QAmBzG,IAAI,CAlBC,QAAC,CAAQ,QAAC,CAAQ,IAAC,CAAI,MAAC,CAAM,aAAC,EAAc,MAAA,EAAQ,OAAA,CAAQ,CAAC;QAmBnE,IAAI,IAlBC,CAAI,cAAC,EAAe;;YAoBvB,IAAI,CAlBC,mBAAC,EAAmB,CAAE;SAmB5B;KACF;;;;;IAKH,qCApBG,GAoBH,UApBG,MAAA;QAAA,uBAAA,EAAA,SAAA,IAAA,CAAA,YAAA,CAAA,KAAA;QAqBC,IAAI,MApBC,KAAU,IAAA,CAAK,YAAC,CAAY,KAAC,EAAM;YAqBtC,IAAI,CApBC,IAAC,EAAI,CAAE;SAqBb;QACD,IAAI,MApBC,KAAU,IAAA,CAAK,YAAC,CAAY,IAAC,EAAK;YAqBrC,IAAI,CApBC,KAAC,EAAK,CAAE;SAqBd;KACF;;;;;;IAlBA,+CAAA,GAwBH,UAxBG,IAAA,EAAA,GAAA;QAyBC,KAxBoB,UAAsC,EAAtC,KAAA,IAAA,CAAK,gBAAC,CAAgB,eAAC,CAAe,EAAtC,cAAsC,EAAtC,IAAsC;YAwBrD,IAxBM,KAAA,SAAA;YAyBT,KAAK,CAxBC,QAAC,GAAU,GAAA,CAAI;SAyBtB;KACF;;;;IAtBA,mDAAA,GA0BH;QACI,qBA1BM,QAAA,GAAW,IAAA,CAAK,MAAC,CAAM,aAAC,CAAa,gBAAC,CAAgB,IAAC,CAAI,CAAC;QA2BlE,qBA1BM,QAAA,GAAW,QAAA,CAAS,MAAC,CAAM;QA2BjC,KAAK,qBA1BI,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,QAAA,EAAU,CAAA,EAAE,EAAG;YA2BjC,IAAI,CA1BC,CAAC,GAAG,IAAA,CAAK,KAAC,MAAS,CAAE,KAAI,IAAE,CAAI,KAAC,GAAO,IAAA,CAAK,KAAC,CAAK,CAAC,EAAE;gBA2BxD,IAAI,CA1BC,eAAC,CAAe,QAAC,CAAQ,CAAC,CAAC,EAAE,CAAA,CAAE,CAAC,CAAC;aA2BvC;iBA1BM;gBA2BL,IAAI,CA1BC,eAAC,CAAe,QAAC,CAAQ,CAAC,CAAC,EAAE,CAAA,CAAE,CAAC;aA2BtC;SACF;KACF;;;;;IAxBA,yDAAA,GA6BH,UA7BG,UAAA;QA8BC,qBA7BM,GAAA,GAAM,MAAA,CAAO,UAAC,CAAU,KAAC,CAAK,CAAC,EAAE,CAAA,CAAE,CAAC,CAAC,GAAG,GAAA,CAAI;QA8BlD,OA7BO,IAAI,CAAI,QAAC,GAAU,GAAA,OAAI,CAAI;KA8BnC;IAAA,AA7BC;;;;;IAED,mDAAA,GAgCH,UAhCG,QAAA;QAiCC,OAhCO,KAAA,QAAI,GAAQ,IAAG,CAAI,IAAK,CAAA;KAiChC;;;;IA5BA,wCAAA,GAgCH;QACI,qBAhCM,QAAA,GAAW,IAAA,CAAK,MAAC,CAAM,aAAC,CAAa,oBAAC,CAAoB,IAAC,CAAI,CAAC;QAiCtE,qBAhCM,QAAA,GAAW,QAAA,CAAS,MAAC,CAAM;QAiCjC,IAAI,CAhCC,GAAC,GAAK,CAAA,QAAE,GAAU,IAAA,CAAK,KAAC,IAAQ,CAAA,CAAE;QAkCvC,IAAI,CAhCC,IAAC,CAAI,cAAC,EAAe;YAiCxB,IAAI,CAhCC,QAAC,CAAQ,WAAC,CAAW,IAAC,CAAI,QAAC,CAAQ,aAAC,EAAc,OAAA,CAAQ,CAAC;;YAkChE,IAAI,CAhCC,QAAC,CAAQ,QAAC,CAAQ,IAAC,CAAI,QAAC,CAAQ,aAAC,EAAc,YAAA,CAAa,CAAA;YAiCjE,IAAI,CAhCC,QAAC,GAAU,IAAA,CAAK,QAAC,CAAQ,aAAC,CAAa,WAAC,CAAW;SAiCzD;;QAGD,IAAI,IAhCC,CAAI,QAAC,CAAQ,QAAC,CAAQ,GAAC,CAAG,IAAI,IAAA,CAAK,cAAC,EAAe;YAiCtD,IAAI,CAhCC,QAAC,CAAQ,QAAC,CAAQ,IAAC,CAAI,QAAC,CAAQ,aAAC,EAAc,OAAA,EAAS,IAAA,CAAK,QAAC,CAAQ,CAAC;YAiC5E,IAAI,CAhCC,YAAC,GAAc,IAAI,CAAI,QAAC,CAAQ,aAAC,CAAa,WAAC,OAAW,CAAI;SAiCpE;aAhCM,IAAA,IAAK,CAAI,QAAC,CAAQ,QAAC,CAAQ,GAAC,CAAG,IAAI,CAAA,IAAE,CAAI,cAAC,EAAe;;YAkC9D,IAAI,CAhCC,YAAC,GAAc,IAAA,CAAK,QAAC;iBAiCH,OAhCC,CAAO,IAAC,CAAI,eAAC,EAAgB,IAAA,CAAK,yBAAC,CAAyB,IAAC,CAAI,IAAC,CAAI,CAAC;iBAiCxE,OAhCC,CAAO,IAAC,CAAI,WAAC,EAAY,IAAA,CAAK,mBAAC,CAAmB,IAAC,CAAI,IAAC,CAAI,CAAC,CAAC;SAiCvF;aAhCM;YAiCL,IAAI,CAhCC,YAAC,GAAc,IAAA,CAAK,QAAC,CAAQ,OAAC,CAAO,IAAC,CAAI,WAAC,EAAY,IAAA,CAAK,mBAAC,CAAmB,IAAC,CAAI,IAAC,CAAI,CAAC,CAAC;SAiClG;;QAGD,IAAI,IAhCC,CAAI,OAAC,CAAO,QAAC,CAAQ,GAAC,CAAG,IAAI,IAAA,CAAK,cAAC,EAAe;YAiCrD,IAAI,CAhCC,QAAC,CAAQ,QAAC,CAAQ,IAAC,CAAI,QAAC,CAAQ,aAAC,EAAc,OAAA,EAAS,IAAA,CAAK,OAAC,CAAO,CAAC;YAiC3E,IAAI,CAhCC,eAAC,GAAiB,IAAI,CAAI,QAAC,CAAQ,aAAC,CAAa,WAAC,OAAW,CAAI;SAiCvE;aAhCM,IAAA,IAAK,CAAI,OAAC,CAAO,QAAC,CAAQ,GAAC,CAAG,IAAI,CAAA,IAAE,CAAI,cAAC,EAAe;YAiC7D,IAAI,CAhCC,eAAC,GAAiB,IAAA,CAAK,OAAC;iBAiCH,OAhCC,CAAO,IAAC,CAAI,eAAC,EAAgB,IAAA,CAAK,yBAAC,CAAyB,IAAC,CAAI,IAAC,CAAI,CAAC;iBAiCxE,OAhCC,CAAO,IAAC,CAAI,WAAC,EAAY,IAAA,CAAK,mBAAC,CAAmB,IAAC,CAAI,IAAC,CAAI,CAAC,CAAC;SAiC1F;aAhCM;YAiCL,IAAI,CAhCC,eAAC,GAAiB,IAAA,CAAK,OAAC,CAAO,OAAC,CAAO,IAAC,CAAI,WAAC,EAAY,IAAA,CAAK,mBAAC,CAAmB,IAAC,CAAI,IAAC,CAAI,CAAC,CAAC;SAiCpG;;QAGD,qBAhCM,YAAA,GAAe,UAAA,IAAS,CAAI,YAAC,WAAY,IAAM,CAAI,eAAC,MAAe,CAAG;;QAmC5E,IAAI,IAhCC,CAAI,cAAC,EAAe;YAiCvB,IAAI,CAhCC,QAAC,CAAQ,QAAC,CAAQ,IAAC,CAAI,QAAC,CAAQ,aAAC,EAAc,OAAA,EAAS,UAAA,YAAS,WAAY,IAAM,CAAI,KAAC,MAAK,CAAG,CAAC;SAiCvG;;QAGD,KAAK,qBAhCI,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,QAAA,EAAU,CAAA,EAAE,EAAG;YAiCjC,IAAI,CAhCC,QAAC,CAAQ,QAAC,CAAQ,QAAC,CAAQ,CAAC,CAAC,EAAE,OAAA,EAAS,KAAA,IAAI,CAAI,YAAa,CAAE,CAAC;YAiCrE,IAAI,CAhCC,QAAC,CAAQ,QAAC,CAAQ,QAAC,CAAQ,CAAC,CAAC,EAAE,QAAA,EAAU,YAAA,IAAW,CAAI,eAAC,UAAe,CAAO,CAAC;SAiCtF;QAhBH,IAAA,CAdO,OAAC,EAAO,CAAE;KAiChB;IAiCH,4BAAC;CApPD;AAoLO,gCAAA,GAAoC;IAiC3C,EAhCE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAiCvB,QAAQ,EAhCE,eAAA;gBAiCV,QAAQ,EAhCE,sOAsCT;gBACD,MAAM,EAhCE,CAAA,ivBAkCP,CAhCC;aAiCH,EAhCC,EAAG;CAiCJ,CAhCC;;;;AAED,oCAAA,GAAA,cAAA,OAAA;IAmCD,EAAC,IAAI,EAAE,SAAS,GAAG;CAClB,GAAA,CAAC;AAjCK,oCAAA,GAAyD;IAmChE,OAAO,EAlCE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAmC1B,SAAS,EAlCE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAmC5B,UAAU,EAlCE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAmC7B,gBAAgB,EAlCE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAmCnC,gBAAgB,EAlCE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAmCnC,MAAM,EAlCE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAmCzB,UAAU,EAlCE,CAAA,EAAG,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA,UAAE,EAAU,EAAG,EAAE;IAmCvD,QAAQ,EAlCE,CAAA,EAAG,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA,QAAE,EAAQ,EAAG,EAAE;IAmCnD,UAAU,EAlCE,CAAA,EAAG,IAAA,EAAM,YAAA,EAAc,IAAA,EAAM,CAAA,eAAE,EAAgB,EAAA,EAAG,EAAG,EAAE;CAmClE,CAlCC;;AC3MF;IAAA;KAwBC;;;;IArBE,0BAAA,GACH;QACI,OADO;YAEL,QAAQ,EADE,kBAAA;YAEV,SAAS,EADE,EAAA;SAEZ,CADC;KAEH;IAeH,yBAAC;CAxBD;AASO,6BAAA,GAAoC;IAE3C,EADE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBAEtB,OAAO,EADE;oBAEP,YAAY;iBACb;gBACD,OAAO,EADE,CAAA,qBAAE,CAAqB;gBAEhC,YAAY,EADE,CAAA,qBAAE,CAAqB;aAEtC,EADC,EAAG;CAEJ,CADC;;;;AAED,iCAAA,GAAA,cAAA,OAAA,EAIA,GAAA,CAAC;;AC9BF;;GAEG;;;;"}